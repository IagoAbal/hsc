
module ListSet where

elem : forall a. a -> [a] -> Bool
elem a [] = False
elem a (x::xs)
  | a == x = True
  | else   = elem a xs

delete1 : forall a. a -> [a] -> [a]
delete1 a [] = []
delete1 a (x::xs)
  | a == x = xs
  | else   = x :: delete1 a xs

delete : forall a. a -> [a] -> [a]
delete a [] = []
delete a (x::xs)
  | a == x = delete a xs
  | else   = x :: delete a xs

append : forall a. [a] -> [a] -> [a]
append [] ys = ys
append (x::xs) ys = x :: (append xs ys)

all : forall a. (a -> Bool) -> [a] -> Bool
all p [] = True
all p (x::xs)
  | p x  = all p xs
  | else = False

nub : forall a. [a] -> [a]
nub []      = []
nub (x::xs) = x :: nub (delete x xs)

-- lemma nub_elem = forall x xs, ~(elem x xs) ==> nub(x::xs) == x::nub xs

-- lemma nub_idempotent = forall xs, nub (nub xs) == nub xs

flip : forall a b c. (a -> b -> c) -> b -> a -> c
flip f x y =  f y x

foldr : forall a b. (a -> b -> b) -> b -> [a] -> b
foldr f z []      =  z
foldr f z (x::xs) =  f x (foldr f z xs)

null : forall a. [a] -> Bool
null []     =  True
null (_::_) =  False

------------------------------------------------------------------------

data Set a = Set {l:[a]|nub l == l}

eq : forall a. Set a -> Set a -> Bool
eq (Set []) (Set ys) = null ys
eq (Set (x::xs)) (Set ys)
  | elem x ys = eq (Set xs) (Set (delete x ys))
  | else      = False

empty : forall a. Set a
empty = Set []

singleton : forall a. a -> Set a
singleton x = Set [x]

set : forall a. [a] -> Set a
set xs = Set (nub xs)

member : forall a. a -> Set a -> Bool
member a (Set xs) = elem a xs

isSubsetOf : forall a. Set a -> Set a -> Bool
isSubsetOf (Set xs) (Set ys) = all (flip elem ys) xs

lemma subset_member =
  forall s t x, isSubsetOf s t && member x s ==> member x t

insert : forall a. a -> Set a -> Set a
insert a s@(Set xs)
  | elem a xs = s
  | else      = Set (a::xs)

lemma insert_member = forall x s, member x (insert x s)

remove : forall a. a -> Set a -> Set a
remove a (Set xs) = Set (delete a xs)

lemma remove_member = forall x s, ~(member x (remove x s))

union : forall a. {s:Set a}
            -> {t:Set a}
            -> {u:Set a|forall x, member x s || member x t <=> member x u}
union s@(Set xs) t@(Set ys)
  = case xs of
        []   -> t
        _::_ -> case ys of
                    []   -> s
                    _::_ -> Set (nub (append xs ys))

lemma union_id = forall s, union s empty == s
lemma union_comm = forall s t, eq (union s t) (union t s)
lemma union_assoc =
  forall s t u, eq (union s (union t u)) (union (union s t) u)
{-
intersection : forall a. {s:Set a}
            -> {t:Set a}
            -> {u:Set a|forall x, member x s && member x t <=> member x u}
intersection (Set []) (Set ys) = empty
intersection (Set (x::xs)) (Set ys)
  | elem x ys = insert x u
  | else      = u
  where s = Set xs
        t = Set (delete x ys)
        u = intersection s t

lemma intersection_zero = forall s, intersection s empty == empty
lemma intersection_comm = forall s t, intersection s t == intersection t s
lemma intersection_assoc =
  forall s t u,
    intersection s (intersection t u) == intersection (intersection s t) u

substract : forall a. {s:Set a}
          -> {t:Set a}
          -> {u:Set a|forall x, member x s && ~(member x t) <=> member x u}
substract (Set xs) (Set ys) = Set (foldr delete xs ys)

lemma substract_zero = forall s, substract s empty == s
-}
