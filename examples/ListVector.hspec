
module ListVector where


length : forall a. [a] -> Nat
length []      = 0
length (_::xs) = 1 + length xs

map f []      = []
map f (x::xs) = f x :: map f xs

lemma map_length = forall f xs, length (map f xs) == length xs

data Vector a = Vec {n:Nat} {xs:[a]|length xs == n}

size : forall a. Vector a -> Nat
size (Vec n _) = n

mapVec : forall a b. (a -> b) -> {u:Vector a} -> {v:Vector b|size v == size u}
mapVec f (Vec n xs) = Vec n (map f xs)

-- FIX BUG
get : forall a. {u:Vector a} -> {n:Nat|n < size u} -> a
get (Vec _ xs) k = go xs k
-- get (Vec _ xs) = go xs
  where go (y::ys) i
          | i == 0 = y
          | else   = go ys (i-1)


get1 : {u:Vector Int} -> {n:Nat|n < size u} -> Int
get1 (Vec _ xs) = go xs
  where go : {(_::_):[Int]} -> {n:Nat|n>10} -> Int
        go (y::ys) i
          | i == 0 = y
          | else   = go ys (i-1)
