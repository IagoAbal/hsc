
module QuickSort where


not p x = ~(p x)

null : forall a. [a] -> Bool
null []     =  True
null (_::_) =  False

elem : forall a. a -> [a] -> Bool
elem a [] = False
elem a (x::xs)
  | a == x = True
  | else   = elem a xs

delete1 : forall a. a -> [a] -> [a]
delete1 a [] = []
delete1 a (x::xs)
  | a == x = xs
  | else   = x :: delete1 a xs

all : forall a. (a -> Bool) -> [a] -> Bool
all p [] = True
all p (x::xs)
  | p x  = all p xs
  | else = False

append : forall a. [a] -> [a] -> [a]
append [] ys = ys
append (x::xs) ys = x :: (append xs ys)

------------------------------------------------------------------------

permutation : forall a. [a] -> [a] -> Bool
permutation []      ys = null ys
permutation (x::xs) ys
  | elem x ys = permutation xs (delete1 x ys)
  | else      = False

sorted : [Int] -> Bool
sorted [] = True
sorted [x] = True
sorted (a::b::xs)
  | a <= b = sorted xs
  | else   = False


partition : forall a. {p:a -> Bool}
                      -> [a]
                      -> (ys:[a]|all p ys,ns:[a]|all (not p) ns)
partition p [] = ([],[])
partition p (x::xs)
  | p x  = (x::ys,ns)
  | else = (ys,x::ns)
  where (ys,ns) = partition p xs

qsort : {p:[Int]} -> {q:[Int] | permutation p q && sorted q}
qsort [] = []
qsort (x::xs) = append (qsort ls) (x :: qsort rs)
  where (ls,rs) = partition (<x) xs
